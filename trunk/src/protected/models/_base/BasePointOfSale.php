<?php

/**
 * This is the model base class for the table "point_of_sale".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "PointOfSale".
 *
 * Columns in table "point_of_sale" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $id
 * @property string $company_id
 * @property integer $is_headquarter
 * @property string $headquarter_id
 * @property string $name
 * @property string $address
 * @property string $province
 * @property string $locality
 * @property string $phone
 * @property string $mail
 * @property string $created_at
 * @property string $updated_at
 * @property string $user_update_id
 * @property string $reference_name
 * @property string $reference_phone
 * @property string $reference_mail
 * @property integer $is_owner
 *
 */
abstract class BasePointOfSale extends GxActiveRecord {

	public $created_log_field = 'created_at';

	public $updated_log_field = 'updated_at';

	public $user_update_log_field = 'user_update_id';
	

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'point_of_sale';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'PointOfSale|PointOfSales', $n);
	}

	public static function representingColumn() {
		return 'name';
	}

	public function rules() {
		return array(
			array('company_id, is_headquarter, headquarter_id, name, address, province, is_owner', 'required'),
			array('is_headquarter, is_owner', 'numerical', 'integerOnly'=>true),
			array('company_id, headquarter_id, user_update_id', 'length', 'max'=>10),
			array('name, address, province, locality, phone, mail, reference_name, reference_phone, reference_mail', 'length', 'max'=>255),
			array('created_at, updated_at', 'safe'),
			array('locality, phone, mail, created_at, updated_at, user_update_id, reference_name, reference_phone, reference_mail', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, company_id, is_headquarter, headquarter_id, name, address, province, locality, phone, mail, created_at, updated_at, user_update_id, reference_name, reference_phone, reference_mail, is_owner', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'company_id' => Yii::t('app', 'Company'),
			'is_headquarter' => Yii::t('app', 'Is Headquarter'),
			'headquarter_id' => Yii::t('app', 'Headquarter'),
			'name' => Yii::t('app', 'Name'),
			'address' => Yii::t('app', 'Address'),
			'province' => Yii::t('app', 'Province'),
			'locality' => Yii::t('app', 'Locality'),
			'phone' => Yii::t('app', 'Phone'),
			'mail' => Yii::t('app', 'Mail'),
			'created_at' => Yii::t('app', 'Created At'),
			'updated_at' => Yii::t('app', 'Updated At'),
			'user_update_id' => Yii::t('app', 'User Update'),
			'reference_name' => Yii::t('app', 'Reference Name'),
			'reference_phone' => Yii::t('app', 'Reference Phone'),
			'reference_mail' => Yii::t('app', 'Reference Mail'),
			'is_owner' => Yii::t('app', 'Is Owner'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('id', $this->id, true);
		$criteria->compare('company_id', $this->company_id, true);
		$criteria->compare('is_headquarter', $this->is_headquarter);
		$criteria->compare('headquarter_id', $this->headquarter_id, true);
		$criteria->compare('name', $this->name, true);
		$criteria->compare('address', $this->address, true);
		$criteria->compare('province', $this->province, true);
		$criteria->compare('locality', $this->locality, true);
		$criteria->compare('phone', $this->phone, true);
		$criteria->compare('mail', $this->mail, true);
		$criteria->compare('created_at', $this->created_at, true);
		$criteria->compare('updated_at', $this->updated_at, true);
		$criteria->compare('user_update_id', $this->user_update_id, true);
		$criteria->compare('reference_name', $this->reference_name, true);
		$criteria->compare('reference_phone', $this->reference_phone, true);
		$criteria->compare('reference_mail', $this->reference_mail, true);
		$criteria->compare('is_owner', $this->is_owner);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}

	/**
	*	Autolog some fields if exists
	*
	*
	*/
	public function behaviors()
	{
    	return array(
        	'AutoLogBehavior' => array(
            	'class' => 'application.components.AutoLogBehavior',
            	//You can optionally set the field name options here
        	)
    	);
	}
}