<?php

/**
 * This is the model base class for the table "purchase".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Purchase".
 *
 * Columns in table "purchase" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $id
 * @property string $company_id
 * @property string $point_of_sale_id
 * @property string $headquarter_id
 * @property string $user_create_id
 * @property string $seller_id
 * @property string $last_dispatch_note_id
 * @property string $carrier_id
 * @property string $price_list_id
 * @property string $imei
 * @property string $brand
 * @property string $model
 * @property string $carrier_name
 * @property string $price_type
 * @property string $purchase_price
 * @property string $paid_price
 * @property string $created_at
 * @property string $updated_at
 * @property string $user_update_id
 * @property string $contract_number
 * @property string $current_status_id
 * @property string $last_location_id
 * @property string $last_source_id
 * @property string $last_destination_id
 * @property string $cae
 * @property string $importe_neto
 * @property string $importe_iva
 * @property string $cae_response_json
 * @property string $gif_response_json
 * @property string $pricelist_log
 * @property string $user_ip
 * @property string $comprobante_tipo
 * @property string $associate_row
 * @property integer $imei_checked
 * @property string $peoplesoft_order
 * @property integer $to_refurbish
 * @property integer $blacklist
 * @property string $gif_response_json_checked
 * @property string $questionary_json_checked
 *
 */
abstract class BasePurchase extends GxActiveRecord {

	public $created_log_field = 'created_at';

	public $updated_log_field = 'updated_at';

	public $user_update_log_field = 'user_update_id';
	

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'purchase';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Purchase|Purchases', $n);
	}

	public static function representingColumn() {
		return 'imei';
	}

	public function rules() {
		return array(
			array('company_id, point_of_sale_id, headquarter_id, user_create_id, seller_id, carrier_id, price_list_id, imei, brand, model, carrier_name, price_type, contract_number', 'required'),
			array('imei_checked, to_refurbish, blacklist', 'numerical', 'integerOnly'=>true),
			array('company_id, point_of_sale_id, headquarter_id, user_create_id, seller_id, last_dispatch_note_id, carrier_id, price_list_id, user_update_id, current_status_id, last_location_id, last_source_id, last_destination_id', 'length', 'max'=>10),
			array('imei', 'length', 'max'=>16),
			array('brand, model, carrier_name', 'length', 'max'=>255),
			array('price_type, contract_number, cae, user_ip, associate_row', 'length', 'max'=>20),
			array('purchase_price, paid_price, importe_neto, importe_iva', 'length', 'max'=>8),
			array('comprobante_tipo', 'length', 'max'=>2),
			array('peoplesoft_order', 'length', 'max'=>50),
			array('created_at, updated_at, cae_response_json, gif_response_json, pricelist_log, gif_response_json_checked, questionary_json_checked', 'safe'),
			array('last_dispatch_note_id, purchase_price, paid_price, created_at, updated_at, user_update_id, current_status_id, last_location_id, last_source_id, last_destination_id, cae, importe_neto, importe_iva, cae_response_json, gif_response_json, pricelist_log, user_ip, comprobante_tipo, associate_row, imei_checked, peoplesoft_order, to_refurbish, blacklist, gif_response_json_checked, questionary_json_checked', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, company_id, point_of_sale_id, headquarter_id, user_create_id, seller_id, last_dispatch_note_id, carrier_id, price_list_id, imei, brand, model, carrier_name, price_type, purchase_price, paid_price, created_at, updated_at, user_update_id, contract_number, current_status_id, last_location_id, last_source_id, last_destination_id, cae, importe_neto, importe_iva, cae_response_json, gif_response_json, pricelist_log, user_ip, comprobante_tipo, associate_row, imei_checked, peoplesoft_order, to_refurbish, blacklist, gif_response_json_checked, questionary_json_checked', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'company_id' => Yii::t('app', 'Company'),
			'point_of_sale_id' => Yii::t('app', 'Point Of Sale'),
			'headquarter_id' => Yii::t('app', 'Headquarter'),
			'user_create_id' => Yii::t('app', 'User Create'),
			'seller_id' => Yii::t('app', 'Seller'),
			'last_dispatch_note_id' => Yii::t('app', 'Last Dispatch Note'),
			'carrier_id' => Yii::t('app', 'Carrier'),
			'price_list_id' => Yii::t('app', 'Price List'),
			'imei' => Yii::t('app', 'Imei'),
			'brand' => Yii::t('app', 'Brand'),
			'model' => Yii::t('app', 'Model'),
			'carrier_name' => Yii::t('app', 'Carrier Name'),
			'price_type' => Yii::t('app', 'Price Type'),
			'purchase_price' => Yii::t('app', 'Purchase Price'),
			'paid_price' => Yii::t('app', 'Paid Price'),
			'created_at' => Yii::t('app', 'Created At'),
			'updated_at' => Yii::t('app', 'Updated At'),
			'user_update_id' => Yii::t('app', 'User Update'),
			'contract_number' => Yii::t('app', 'Contract Number'),
			'current_status_id' => Yii::t('app', 'Current Status'),
			'last_location_id' => Yii::t('app', 'Last Location'),
			'last_source_id' => Yii::t('app', 'Last Source'),
			'last_destination_id' => Yii::t('app', 'Last Destination'),
			'cae' => Yii::t('app', 'Cae'),
			'importe_neto' => Yii::t('app', 'Importe Neto'),
			'importe_iva' => Yii::t('app', 'Importe Iva'),
			'cae_response_json' => Yii::t('app', 'Cae Response Json'),
			'gif_response_json' => Yii::t('app', 'Gif Response Json'),
			'pricelist_log' => Yii::t('app', 'Pricelist Log'),
			'user_ip' => Yii::t('app', 'User Ip'),
			'comprobante_tipo' => Yii::t('app', 'Comprobante Tipo'),
			'associate_row' => Yii::t('app', 'Associate Row'),
			'imei_checked' => Yii::t('app', 'Imei Checked'),
			'peoplesoft_order' => Yii::t('app', 'Peoplesoft Order'),
			'to_refurbish' => Yii::t('app', 'To Refurbish'),
			'blacklist' => Yii::t('app', 'Blacklist'),
			'gif_response_json_checked' => Yii::t('app', 'Gif Response Json Checked'),
			'questionary_json_checked' => Yii::t('app', 'Questionary Json Checked'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('t.id', $this->id, true);
		$criteria->compare('t.company_id', $this->company_id, true);
		$criteria->compare('t.point_of_sale_id', $this->point_of_sale_id, true);
		$criteria->compare('t.headquarter_id', $this->headquarter_id, true);
		$criteria->compare('t.user_create_id', $this->user_create_id, true);
		$criteria->compare('t.seller_id', $this->seller_id, true);
		$criteria->compare('t.last_dispatch_note_id', $this->last_dispatch_note_id, true);
		$criteria->compare('t.carrier_id', $this->carrier_id, true);
		$criteria->compare('t.price_list_id', $this->price_list_id, true);
		$criteria->compare('t.imei', $this->imei, true);
		$criteria->compare('t.brand', $this->brand, true);
		$criteria->compare('t.model', $this->model, true);
		$criteria->compare('t.carrier_name', $this->carrier_name, true);
		$criteria->compare('t.price_type', $this->price_type, true);
		$criteria->compare('t.purchase_price', $this->purchase_price, true);
		$criteria->compare('t.paid_price', $this->paid_price, true);
		$criteria->compare('t.created_at', $this->created_at, true);
		$criteria->compare('t.updated_at', $this->updated_at, true);
		$criteria->compare('t.user_update_id', $this->user_update_id, true);
		$criteria->compare('t.contract_number', $this->contract_number, true);
		$criteria->compare('t.current_status_id', $this->current_status_id, true);
		$criteria->compare('t.last_location_id', $this->last_location_id, true);
		$criteria->compare('t.last_source_id', $this->last_source_id, true);
		$criteria->compare('t.last_destination_id', $this->last_destination_id, true);
		$criteria->compare('t.cae', $this->cae, true);
		$criteria->compare('t.importe_neto', $this->importe_neto, true);
		$criteria->compare('t.importe_iva', $this->importe_iva, true);
		$criteria->compare('t.cae_response_json', $this->cae_response_json, true);
		$criteria->compare('t.gif_response_json', $this->gif_response_json, true);
		$criteria->compare('t.pricelist_log', $this->pricelist_log, true);
		$criteria->compare('t.user_ip', $this->user_ip, true);
		$criteria->compare('t.comprobante_tipo', $this->comprobante_tipo, true);
		$criteria->compare('t.associate_row', $this->associate_row, true);
		$criteria->compare('t.imei_checked', $this->imei_checked);
		$criteria->compare('t.peoplesoft_order', $this->peoplesoft_order, true);
		$criteria->compare('t.to_refurbish', $this->to_refurbish);
		$criteria->compare('t.blacklist', $this->blacklist);
		$criteria->compare('t.gif_response_json_checked', $this->gif_response_json_checked, true);
		$criteria->compare('t.questionary_json_checked', $this->questionary_json_checked, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}

	/**
	*	Autolog some fields if exists
	*
	*
	*/
	public function behaviors()
	{
    	return array(
        	'AutoLogBehavior' => array(
            	'class' => 'application.components.AutoLogBehavior',
            	//You can optionally set the field name options here
        	)
    	);
	}
}