<?php

/**
 * This is the model base class for the table "purchase".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Purchase".
 *
 * Columns in table "purchase" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $id
 * @property string $company_id
 * @property string $point_of_sale_id
 * @property string $headquarter_id
 * @property string $user_create_id
 * @property string $seller_id
 * @property string $contract_id
 * @property string $last_dispatch_note_id
 * @property string $carrier_id
 * @property string $price_list_id
 * @property string $imei
 * @property string $brand
 * @property string $model
 * @property string $carrier_name
 * @property string $price_type
 * @property string $purchase_price
 * @property string $paid_price
 * @property string $created_at
 * @property string $updated_at
 * @property string $user_update_id
 * @property string $contract_number
 * @property string $current_status_id
 * @property string $last_location_id
 * @property string $last_source_id
 * @property string $last_destination_id
 * @property string $cae
 * @property string $importe_neto
 * @property string $importe_iva
 * @property string $cae_response_json
 */
abstract class BasePurchase extends GxActiveRecord
{

    public $created_log_field = 'created_at';

    public $updated_log_field = 'updated_at';

    public $user_update_log_field = 'user_update_id';
    

    public static function model($className = __CLASS__)
    {
        return parent::model($className);
    }

    public function tableName()
    {
        return 'purchase';
    }

    public static function label($n = 1)
    {
        return Yii::t('app', 'Purchase|Purchases', $n);
    }

    public static function representingColumn()
    {
        return 'imei';
    }

    public function rules()
    {
        return array(
        array('company_id, point_of_sale_id, headquarter_id, user_create_id, seller_id, price_list_id, imei, brand, model, carrier_name, price_type, contract_number', 'required'),
        array('company_id, point_of_sale_id, headquarter_id, user_create_id, seller_id, contract_id, last_dispatch_note_id, carrier_id, price_list_id, user_update_id, current_status_id, last_location_id, last_source_id, last_destination_id', 'length', 'max'=>10),
        array('imei', 'length', 'max'=>16),
        array('brand, model, carrier_name', 'length', 'max'=>255),
        array('price_type, contract_number, cae', 'length', 'max'=>20),
        array('purchase_price, paid_price, importe_neto, importe_iva', 'length', 'max'=>8),
        array('created_at, updated_at, cae_response_json', 'safe'),
        array('contract_id, last_dispatch_note_id, carrier_id, purchase_price, paid_price, created_at, updated_at, user_update_id, current_status_id, last_location_id, last_source_id, last_destination_id, cae, importe_neto, importe_iva, cae_response_json', 'default', 'setOnEmpty' => true, 'value' => null),
        array('id, company_id, point_of_sale_id, headquarter_id, user_create_id, seller_id, contract_id, last_dispatch_note_id, carrier_id, price_list_id, imei, brand, model, carrier_name, price_type, purchase_price, paid_price, created_at, updated_at, user_update_id, contract_number, current_status_id, last_location_id, last_source_id, last_destination_id, cae, importe_neto, importe_iva, cae_response_json', 'safe', 'on'=>'search'),
        );
    }

    public function relations()
    {
        return array(
        );
    }

    public function pivotModels()
    {
        return array(
        );
    }

    public function attributeLabels()
    {
        return array(
        'id' => Yii::t('app', 'ID'),
        'company_id' => Yii::t('app', 'Company'),
        'point_of_sale_id' => Yii::t('app', 'Point Of Sale'),
        'headquarter_id' => Yii::t('app', 'Headquarter'),
        'user_create_id' => Yii::t('app', 'User Create'),
        'seller_id' => Yii::t('app', 'Seller'),
        'contract_id' => Yii::t('app', 'Contract'),
        'last_dispatch_note_id' => Yii::t('app', 'Last Dispatch Note'),
        'carrier_id' => Yii::t('app', 'Carrier'),
        'price_list_id' => Yii::t('app', 'Price List'),
        'imei' => Yii::t('app', 'Imei'),
        'brand' => Yii::t('app', 'Brand'),
        'model' => Yii::t('app', 'Model'),
        'carrier_name' => Yii::t('app', 'Carrier Name'),
        'price_type' => Yii::t('app', 'Price Type'),
        'purchase_price' => Yii::t('app', 'Purchase Price'),
        'paid_price' => Yii::t('app', 'Paid Price'),
        'created_at' => Yii::t('app', 'Created At'),
        'updated_at' => Yii::t('app', 'Updated At'),
        'user_update_id' => Yii::t('app', 'User Update'),
        'contract_number' => Yii::t('app', 'Contract Number'),
        'current_status_id' => Yii::t('app', 'Current Status'),
        'last_location_id' => Yii::t('app', 'Last Location'),
        'last_source_id' => Yii::t('app', 'Last Source'),
        'last_destination_id' => Yii::t('app', 'Last Destination'),
        'cae' => Yii::t('app', 'Cae'),
        'importe_neto' => Yii::t('app', 'Importe Neto'),
        'importe_iva' => Yii::t('app', 'Importe Iva'),
        'cae_response_json' => Yii::t('app', 'Cae Response Json'),
        );
    }

    public function search()
    {
        $criteria = new CDbCriteria;

        $criteria->compare('id', $this->id, true);
        $criteria->compare('company_id', $this->company_id, true);
        $criteria->compare('point_of_sale_id', $this->point_of_sale_id, true);
        $criteria->compare('headquarter_id', $this->headquarter_id, true);
        $criteria->compare('user_create_id', $this->user_create_id, true);
        $criteria->compare('seller_id', $this->seller_id, true);
        $criteria->compare('contract_id', $this->contract_id, true);
        $criteria->compare('last_dispatch_note_id', $this->last_dispatch_note_id, true);
        $criteria->compare('carrier_id', $this->carrier_id, true);
        $criteria->compare('price_list_id', $this->price_list_id, true);
        $criteria->compare('imei', $this->imei, true);
        $criteria->compare('brand', $this->brand, true);
        $criteria->compare('model', $this->model, true);
        $criteria->compare('carrier_name', $this->carrier_name, true);
        $criteria->compare('price_type', $this->price_type, true);
        $criteria->compare('purchase_price', $this->purchase_price, true);
        $criteria->compare('paid_price', $this->paid_price, true);
        $criteria->compare('created_at', $this->created_at, true);
        $criteria->compare('updated_at', $this->updated_at, true);
        $criteria->compare('user_update_id', $this->user_update_id, true);
        $criteria->compare('contract_number', $this->contract_number, true);
        $criteria->compare('current_status_id', $this->current_status_id, true);
        $criteria->compare('last_location_id', $this->last_location_id, true);
        $criteria->compare('last_source_id', $this->last_source_id, true);
        $criteria->compare('last_destination_id', $this->last_destination_id, true);
        $criteria->compare('cae', $this->cae, true);
        $criteria->compare('importe_neto', $this->importe_neto, true);
        $criteria->compare('importe_iva', $this->importe_iva, true);
        $criteria->compare('cae_response_json', $this->cae_response_json, true);

        return new CActiveDataProvider(
            $this,
            array(
            'criteria' => $criteria,
            )
        );
    }

    /**
    *    Autolog some fields if exists
    */
    public function behaviors()
    {
        return array(
            'AutoLogBehavior' => array(
                'class' => 'application.components.AutoLogBehavior',
                //You can optionally set the field name options here
            )
        );
    }
}
