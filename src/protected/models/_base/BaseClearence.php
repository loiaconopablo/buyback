<?php

/**
 * This is the model base class for the table "clearence".
 * DO NOT MODIFY THIS FILE! It is automatically generated by giix.
 * If any changes are necessary, you must set or override the required
 * property or method in class "Clearence".
 *
 * Columns in table "clearence" available as properties of the model,
 * and there are no model relations.
 *
 * @property string $id
 * @property string $company_id
 * @property string $user_create_id
 * @property string $created_at
 * @property string $updated_at
 * @property string $user_update_id
 * @property string $total_purchase
 * @property string $total_paid
 * @property string $error_allowance
 * @property string $paid_comision
 * @property string $total_comision
 *
 */
abstract class BaseClearence extends GxActiveRecord {

	public $created_log_field = 'created_at';

	public $updated_log_field = 'updated_at';

	public $user_update_log_field = 'user_update_id';
	

	public static function model($className=__CLASS__) {
		return parent::model($className);
	}

	public function tableName() {
		return 'clearence';
	}

	public static function label($n = 1) {
		return Yii::t('app', 'Clearence|Clearences', $n);
	}

	public static function representingColumn() {
		return 'created_at';
	}

	public function rules() {
		return array(
			array('company_id, user_create_id', 'required'),
			array('company_id, user_create_id, user_update_id', 'length', 'max'=>10),
			array('total_purchase, total_paid, error_allowance, paid_comision, total_comision', 'length', 'max'=>8),
			array('created_at, updated_at', 'safe'),
			array('created_at, updated_at, user_update_id, total_purchase, total_paid, error_allowance, paid_comision, total_comision', 'default', 'setOnEmpty' => true, 'value' => null),
			array('id, company_id, user_create_id, created_at, updated_at, user_update_id, total_purchase, total_paid, error_allowance, paid_comision, total_comision', 'safe', 'on'=>'search'),
		);
	}

	public function relations() {
		return array(
		);
	}

	public function pivotModels() {
		return array(
		);
	}

	public function attributeLabels() {
		return array(
			'id' => Yii::t('app', 'ID'),
			'company_id' => Yii::t('app', 'Company'),
			'user_create_id' => Yii::t('app', 'User Create'),
			'created_at' => Yii::t('app', 'Created At'),
			'updated_at' => Yii::t('app', 'Updated At'),
			'user_update_id' => Yii::t('app', 'User Update'),
			'total_purchase' => Yii::t('app', 'Total Purchase'),
			'total_paid' => Yii::t('app', 'Total Paid'),
			'error_allowance' => Yii::t('app', 'Error Allowance'),
			'paid_comision' => Yii::t('app', 'Paid Comision'),
			'total_comision' => Yii::t('app', 'Total Comision'),
		);
	}

	public function search() {
		$criteria = new CDbCriteria;

		$criteria->compare('t.id', $this->id, true);
		$criteria->compare('t.company_id', $this->company_id, true);
		$criteria->compare('t.user_create_id', $this->user_create_id, true);
		$criteria->compare('t.created_at', $this->created_at, true);
		$criteria->compare('t.updated_at', $this->updated_at, true);
		$criteria->compare('t.user_update_id', $this->user_update_id, true);
		$criteria->compare('t.total_purchase', $this->total_purchase, true);
		$criteria->compare('t.total_paid', $this->total_paid, true);
		$criteria->compare('t.error_allowance', $this->error_allowance, true);
		$criteria->compare('t.paid_comision', $this->paid_comision, true);
		$criteria->compare('t.total_comision', $this->total_comision, true);

		return new CActiveDataProvider($this, array(
			'criteria' => $criteria,
		));
	}

	/**
	*	Autolog some fields if exists
	*
	*
	*/
	public function behaviors()
	{
    	return array(
        	'AutoLogBehavior' => array(
            	'class' => 'application.components.AutoLogBehavior',
            	//You can optionally set the field name options here
        	)
    	);
	}
}